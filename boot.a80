	MODULE 	boot
	DEVICE 	ZXSPECTRUM48
	OUTPUT	boot.cde
	/*
; ███████████████ M O V E  T O  S R A M ███████████████████████████████████████	
			org 49000
			di
			xor a
			out (23),a
			ld bc,#203B				//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,1					//HW - 1 - MB03+
			out (c),a
			ld a, 160
			out (23),a
			ld hl,49152
			ld de,0
			ld bc,16384
			ldir
			ld a,128
			out (23),a
			rst 0
moveend			
	BLOCK   (49152-moveend),0
*/	
; --------------- V A R I A B L E S ---------------------------------------			
DMA 		equ #0B
ULA			equ #FE
zvukcompile	equ 60000 ; adresa zkopilovaneho zvuku 
; --------------- M A I N C O D E ---------------------------------------
			org 49152
			
maincode
			
//			org 0
			DISP 0
boot		di
				ld sp,0
				ld	a, #C3		; Z80DMA command: WR6: Reset
				out	(DMA), a
				xor	a
				ld	i, a
				out (ULA),a
				ld	hl, 5AFFh
				ld	de, 5AFEh
				ld	bc, 1AFFh
				ld	(hl), a
				lddr			; Clear	videoram (black	screen)				
	INCLUDE "effect.a80"		; Busy nonbootdisk effect
/*				
			ld bc, 203Bh		; ZXi portselect
			out (c),a
			ld a,8				; dissable monsterblaster till bsdos uses port 0Fh
			ld bc, 213Bh		; ZXi port0 - Audio
			out (c),a	
*/			
/*			in	a, (ULA)
			cpl
			and	1Fh
			jr  z,endramtest	;testram if anykey
;			jr endramtest
; ███████████████ RAM TEST ███████████████████████████████████████
;it's comes from legacy MB02+ bootloader version 003

ramtest xor a					
		ld 	hl, #4000
		ld	de, #0608
		ld	bc, 32765
		out	(c), a

ram_test_loop:								
		cpl
		ld	(hl), a
		xor	(hl)
		ld	(hl), a
		xor	(hl)
		jr	nz, ram_fault
		inc	l
		jr	nz, ram_test_loop
		inc	h
		jr	nz, ram_test_loop
		ld	h, #C0				; RAM pages start address
		ld	a, e
		cp	d
		jr	nz, no_page5		; Don't test RAM page 5 again
		dec	e

no_page5:				
		cp	3					; Don't test RAM page 2 again
		jr	nz, no_page2
		dec	e

no_page2:				
		xor	a
		dec	e
		out	(c), e
		jr	nz, ram_test_loop
;endtest
		jr endramtest

ram_fault:				
		ld	a, e
		out	(254), a

delay1:					
		djnz	$
		cpl
		out	(254), a
		ld	b, 7

delay2:					
		djnz	$
		jr	ram_fault			
; ███████████████ E N D  R A M  T E S T ███████████████████████████████████████			
*/			
skipramtest			

endramtest	ld hl,ramcodeinrom
			ld de,ramcode
			ld bc,endramcode-ramcode
			ldir
			jp ramcode

ramcodeinrom	

			ent						; restore address to compile to right place
ramcode		
			di						; for sna test
			ld sp,0				; for sna test
; temporary switch to MB02+ machine			
			xor a
			ld bc,#203B				//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,1					//HW - 1 - MB02+
			out (c),a

			call cls.CLS
			ld   a,7
			ld   HL,22528
			ld   DE,22529
			ld   BC,767
			ld   (HL),a
			ldir
			ld a,0
			ld (txy32.orflag),a
			ld a,66
			ld (txy32.T32_ATT),a
			ld	bc,#0000
			call fall1
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim
			ld a,70
			ld (txy32.T32_ATT),a
			ld	bc,#0010
			call fall1
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			ld a,68
			ld (txy32.T32_ATT),a
			ld	bc,#002E
			call fall1
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			ld a,69
			ld (txy32.T32_ATT),a
			ld	bc,#0059
			call fall1
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim
				
			ld a,1
			ld (txy32.orflag),a
			ld a,66
			ld (txy32.T32_ATT),a
			ld	bc,#0000
			call fall2
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			ld a,70
			ld (txy32.T32_ATT),a
			ld	bc,#0010
			call fall2			
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			ld a,68
			ld (txy32.T32_ATT),a
			ld	bc,#0028
			call fall3
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			ld a,69
			ld (txy32.T32_ATT),a
			ld	bc,#0058
			call fall4
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			
			ld a,0
			ld (txy32.orflag),a
			ld a,69
			ld (txy32.T32_ATT),a
			ld	bc,#2A57
			ld  de,#2A60
			ld a,#4B
			call wide1
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			
			ld b,1
			call wait.wait
			ld a,68
			ld (txy32.T32_ATT),a
			ld	bc,#2A2A
			ld  de,#2A35
			ld a,#1F
			call wide1
				call iinkey.IINKEY		; waiting for key
				jp nz,skipanim			

;			call iinkey.ANYKEY	
			jp follow1
			
wide1		push af
			push de
			push bc
			ld	(txy32.cursor),bc
			ld a,132
			call txy32.xy
			pop bc
			push bc
			ld a,8
			add a,b
			ld b,a
			ld a,134
			ld	(txy32.cursor),bc
			call txy32.xy
			pop bc
			pop de
			push bc
			push de
			ld	(txy32.cursor),de
			ld a,129
			call txy32.xy
			pop de
			push de
			ld a,8
			add a,d
			ld d,a
			ld	(txy32.cursor),de
			ld a,131
			call txy32.xy
			ld b,4
			call wait.wait
			pop de
			pop bc
			pop af
			inc e
			dec c
			cp c
			jr nz,wide1
			ret
			
fall1		push bc
			call singledot
			ld b,1
			call wait.wait
			pop bc
			inc b
			ld a,#2B
			cp b
			jr nz,fall1
			ret
fall2		push bc
			call halfdot
			ld b,1
			call wait.wait
			pop bc
			inc b
			ld a,#2B
			cp b
			jr nz,fall2
			ret			
	
fall3		push bc
			call halfdot3
			ld b,1
			call wait.wait
			pop bc
			inc b
			ld a,#2B
			cp b
			jr nz,fall3
			ret	

fall4		push bc
			call halfdot4
			ld b,1
			call wait.wait
			pop bc
			inc b
			ld a,#2B
			cp b
			jr nz,fall4
			ret				
	
halfdot     ld	(txy32.cursor),bc
			ld a,132
			call txy32.xy
			ld a,133
			jp txy32.xy

halfdot3    ld	(txy32.cursor),bc
			ld a,136
			call txy32.xy
			ld a,137
			jp txy32.xy	

halfdot4    ld	(txy32.cursor),bc
			ld a,138
			call txy32.xy
			ld a,139
			jp txy32.xy	
			
singledot	ld	(txy32.cursor),bc
			ld a,132
			push bc
			call txy32.xy
			ld a,133
			call txy32.xy
			pop	bc
			ld a,8
			add a,b
			ld b,a
			ld	(txy32.cursor),bc	
			ld a,134
			call txy32.xy
			ld a,135
			call txy32.xy
			ret

follow1		ld de,#050F
	        ld hl,ultimatelogo
			ld a,13			// number of sprites in animations
1			push af
			push de
			push hl
			call sprite2.OK
			ld b,12
			call wait.wait
			pop hl
			ld de,20			// lenght of sprite2
			add hl,de
			pop de
			inc e
			pop af
			dec a
			jr nz,1B
//Ultimate		
			ld de,#0500
	        ld hl,dots+38*0
			ld a,6			// number of sprites in animations
2			push af
			push de
			push hl
//			call sprite2.OK
			ld b,9
			call wait.wait
			pop hl
			pop de
			inc e
			inc e
			pop af
			dec a
			jr nz,2B
skipanim			
			ld de,#0000
	    ld hl,MB03pluslogo
			call sprite2.OK
/*			ld de,#040A
	        ld hl,CaroLogo
			call sprite2.OK
*/
			ld hl, STRIPS
			ld bc,#4800
			ld	(txy32.cursor),bc
			push hl
			call txy32.txy
			pop hl
			ld bc,#A000
			ld	(txy32.cursor),bc
			call txy32.txy
;carymary         
			 ld bc,#4800
			 ld de,#48ff
			 call draw_jugo.DRAW

			ld	bc,#3D7A
			ld	(txy51.cursor),bc
			ld	hl,TEXT0
			call txy51.txy
			ld	bc,#A800
			ld	(txy51.cursor),bc
			ld	hl,TEXT4
			call txy51.txy			
			ld	bc,#B800
			ld	(txy51.cursor),bc
			ld	hl,TEXT3
			call txy51.txy
			ld	bc,#B000
			ld	(txy51.cursor),bc
			ld	hl,TEXT2
			call txy51.txy
			ld	bc,#9EB1
			ld	(txy51.cursor),bc
			ld	hl,FW1
			call txy51.txy
			ld	bc,#9ED9
			ld	(txy51.cursor),bc
			ld	hl,DATE
			call txy51.txy		

			ld	bc,#5000
			ld	(txy51.cursor),bc
			ld	hl,HW1
			call txy51.txy
			ld	bc,#5803
			ld	(txy51.cursor),bc
			ld	hl,HW2
			call txy51.txy
			ld	bc,#6003
			ld	(txy51.cursor),bc
			ld	hl,HW3
			call txy51.txy
			ld	bc,#6803
			ld	(txy51.cursor),bc
			ld	hl,HW4
			call txy51.txy
			ld	bc,#7003
			ld	(txy51.cursor),bc
			ld	hl,HW5
			call txy51.txy
			ld	bc,#7803
			ld	(txy51.cursor),bc
			ld	hl,HW6
			call txy51.txy

			ld	bc,#8000
			ld	(txy51.cursor),bc
			ld	hl,CONF1
			call txy51.txy
			ld	bc,#8803
			ld	(txy51.cursor),bc
			ld	hl,CONF2
			call txy51.txy
			ld	bc,#9003
			ld	(txy51.cursor),bc
			ld	hl,CONF3
//carymary2
			call txy51.txy		
			 ld bc,#A600
			 ld de,#A6ff
			 call draw_jugo.DRAW
			
/*			ld	bc,#9000
			ld	(txy51.cursor),bc
			ld	hl,TEXTTEST2
			call txy51.txy			
*/			
1			call iinkey.IINKEY		; waiting for key
			jr z,1B
			cp 11h					; break
			jr nz,2F				; no break
			xor a					; break
			out (23),a 				; dissable MB03+ SRAM
									;ZX128+2A rom
			ld bc,8189
			out (c),a
			
			ld bc,32765				; ZX128 rom0 
			out (c),a
			rst 0					; jp to 0
2			
			cp '1'					//key 1
			jr nz,3F
			ld b,6					//number of pages to transfer					
22			push bc
			xor a
			ld bc,#203B					//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,255					//HW - FF - Firmware
			out (c),a
			xor a
			out (#27),a
			out (#67),a
			pop bc
			push bc
			ld a,8						;first Flash block
			dec b
			add a,b	
			add a,b						;multiplication by 2									
			out (#07),a
			inc a
			out (#47),a

			ld hl,0
			ld de,32768
			ld bc,16384
			ldir

			ld bc,#213B
			ld a,1						//HW - 1 - MB02+
			out (c),a
			pop bc
			push bc
			ld a,96						;first MB02+ RAM
			dec b
			add a,b
			out (23), a
			ld hl,32768
			ld de,0
			ld bc,16384
			ldir
			pop bc
			djnz 22B

			ld a,64
			out (23),a
			jr 4F
3			
			cp '!'					; key !
			jr nz, 5F				
4			xor a
			ld bc,#203B					//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,255					//HW - FF - Firmware
			out (c),a
			xor a
			out (#27),a
			out (#67),a
			ld a,6						//
			out (#07),a
			inc a
			out (#47),a
			ld hl,0			; run EasyHDD
			ld de,32768
			ld bc,16384
			ldir
			ld bc,#213B
			ld a,1					//HW - 1 - MB02+
			out (c),a					
			call 32768
			jr 6F

5			cp 'e'					// key e
			jr nz, 7F				// no key
			
6			ld a,64					// 128K reset in BSROM140
			out (23),a
			jp #3906				//jp to bsrom140
			
7			cp 'd'
			jr nz, 8F				
; clear below 3/3			
			ld   a,7
			ld   HL,22528+512
			ld   DE,22529+512
			ld   BC,255
			ld   (HL),a
			ldir
			ld   HL,20480
			ld   DE,20481
			ld   BC,2047
			ld   (HL),l
			ldir

			xor a
			ld bc,#203B					//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,255					//HW - FF - Firmware
			out (c),a
			xor a
			out (#27),a
			out (#67),a

			ld a,20														
			out (#07),a
			inc a
			out (#47),a

			ld hl,0
			ld de,27000
			ld bc,6000
			ldir

			ld bc,#213B
			ld a,1						//HW - 1 - MB02+
			out (c),a
			
			ld a,64
			out (23),a
			jp 27000
			
8			cp 't'					// key t - zx diagnostics
			jr nz, 9F				// no key
			xor a
			ld bc,#203B				//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,255				//HW - FF - Firmware
			out (c),a
			xor a
			out (#27),a
			out (#67),a
			ld a,2
			out (#07),a
			inc a
			out (#47),a
			ld a,%01100000	;enable flash write disable
			out (#53),a
			rst 0
9			cp '2'					// key 2 - Papaya DOS- ESXDOS DivMMC
			jr nz, 10F				
			xor a
			out (23),a
			ld bc,#203B				//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,2					//HW - 2 - DIVMMC
			out (c),a
			ld bc,#203B				//ZXi portselect 
			ld a,2
			out (c),a
			ld bc,#213B
			xor a					//IDE - 0 dissable
			out (c),a
			ld a,128
div_erase	out (#E3),a
			ld hl,8192
			ld de,8193
			ld bc,8191
			ld (hl),l
			ldir
			inc a
			cp 128+5
			jr nz,div_erase		//delete first 32KB od DivIde RAM
			xor a							//is enought to erase bank0 or
			out (#E3),a				//to force cold start zero $2dXX in page 0
			rst 0
10		cp "R"					//restart firmware
			jr nz, 11F
			rst 0
11		cp "r"					//restart to ramcode
			jr nz,12F
			jp ramcode
12		cp "T"					//advance system info
			jp nz,14F
13			ld hl,#5000
			ld de,#5001
			ld bc,#07ff
			ldir
			xor a
			ld bc,#203B				//ZXi portselect
			out (c),a
			ld a,#FF
			ld bc,#213B			
			out (c),a
			ld a,#E0				//FRAM active
			out (#53),a

			ld	bc,#9000
			ld	(txy51.cursor),bc
			ld	hl,ADVS1
			call txy51.txy

			ld hl,#3FFC
			ld de,xdec_06.zzbin
			ld bc,4
			ldir
			call xdec_06.bindec
			ld b,10
			ld c," "
			ld hl,xdec_06.zzdec
1			ld a,(hl)
			add a,"0"
			cp "0"
			jr nz,3F
			ld a,c			
			jr 2F
3			ld c,"0"			
2			push hl
			push bc
			call txy51.xy
			pop bc
			pop hl
			inc hl
			djnz 1B

			ld	bc,#9800
			ld	(txy51.cursor),bc
			ld	hl,ADVS2
			call txy51.txy

			ld hl,#3FF8
			ld de,xdec_06.zzbin
			ld bc,4
			ldir
			call xdec_06.bindec
			ld b,10
			ld c," "
			ld hl,xdec_06.zzdec
1			ld a,(hl)
			add a,"0"
			cp "0"
			jr nz,3F
			ld a,c			
			jr 2F
3			ld c,"0"			
2			push hl
			push bc
			call txy51.xy
			pop bc
			pop hl
			inc hl
			djnz 1B

			ld	bc,#A000
			ld	(txy51.cursor),bc
			ld	hl,ADVS3
			call txy51.txy

			ld hl,#3FF4
			ld de,xdec_06.zzbin
			ld bc,4
			ldir
			call xdec_06.bindec
			ld b,10
			ld c," "
			ld hl,xdec_06.zzdec
1			ld a,(hl)
			add a,"0"
			cp "0"
			jr nz,3F
			ld a,c			
			jr 2F
3			ld c,"0"			
2			push hl
			push bc
			call txy51.xy
			pop bc
			pop hl
			inc hl
			djnz 1B

			ld	bc,#A800
			ld	(txy51.cursor),bc
			ld	hl,ADVS4
			call txy51.txy

			ld hl,#3FF0
			ld de,xdec_06.zzbin
			ld bc,4
			ldir
			call xdec_06.bindec
			ld b,10
			ld c," "
			ld hl,xdec_06.zzdec
1			ld a,(hl)
			add a,"0"
			cp "0"
			jr nz,3F
			ld a,c			
			jr 2F
3			ld c,"0"			
2			push hl
			push bc
			call txy51.xy
			pop bc
			pop hl
			inc hl
			djnz 1B

			ld	bc,#B000
			ld	(txy51.cursor),bc
			ld	hl,ADVS5
			call txy51.txy

			ld hl,#3FEC
			ld de,xdec_06.zzbin
			ld bc,4
			ldir
			call xdec_06.bindec
			ld b,10
			ld c," "
			ld hl,xdec_06.zzdec
1			ld a,(hl)
			add a,"0"
			cp "0"
			jr nz,3F
			ld a,c			
			jr 2F
3			ld c,"0"			
2			push hl
			push bc
			call txy51.xy
			pop bc
			pop hl
			inc hl
			djnz 1B

//carymary2
			ld bc,#B800
			ld	(txy32.cursor),bc
			LD HL, STRIPS
			call txy32.txy
			ld bc,#BF00
			ld de,#BFff
			call draw_jugo.DRAW
			call iinkey.ANYKEY
			jp 13B

14		cp "@"					//DivIDE
			jp nz, 1B
			xor a
			out (23),a
			ld bc,#203B				//ZXi portselect
			out (c),a
			ld bc,#213B
			ld a,3						//HW - 3 - DIVMMC/DIVIDE
			out (c),a

			ld bc,#203B				//ZXi portselect 
			ld a,2
			out (c),a
			ld bc,#213B
			ld a,2						//IDE - 2 PVL ports- DIVMMC/DIVIDE
			out (c),a

			ld bc,#203B				//ZXi portselect 
			ld a,1						//Audio
			out (c),a
			ld bc,#213B
			ld a,%00010000  	//dissable GS
			out (c),a

			ld a,128
div_erase2	out (#E3),a
			ld hl,8192
			ld de,8193
			ld bc,8191
			ld (hl),l
			ldir
			inc a
			cp 128+5
			jr nz,div_erase2			//delete first 32KB od DivIde RAM
			xor a						//is enought to erase bank0 or
			out (#E3),a					//to force cold start zero $2dXX in page 0
			rst 0

;------------------------------
;HL-HODNOTA
;TISKNE CISLO TYPU INTEGER
NUMBER4  ld   de,-10000
         call NUM_JED
NUMBER3  ld   de,-1000
         call NUM_JED
NUMBER2  ld   de,-100
         call NUM_JED
NUMBER1  ld   de,-10
         call NUM_JED
NUMBER0  ld   a,l
         add  a,48
         jp   txy51.xy

NUM_JED  xor  a
NUM_JED1 add  hl,de
         jr   nc,NUM_PRIC
         inc  a
         jr   NUM_JED1
NUM_PRIC sbc  hl,de
         add  a,48
         push bc
         push hl
         call txy51.xy
         pop  hl
         pop  bc
         ;;inc  c
         ret

; --------------- L I B R A R I E S ---------------------------------------	
	
//INCLUDE "nasobeniHLDE.a80"
	INCLUDE "draw-jugo.a80"
	INCLUDE "cls.a80"
	INCLUDE "iinkey.a80"
	INCLUDE "wait.a80"
//	INCLUDE "t42.a80"
//	INCLUDE "txy.a80"
	INCLUDE "txy51.a80"
	INCLUDE "txy32.a80"
	INCLUDE "sprite2.a80"
	INCLUDE "xdec_06.a80"
MB03pluslogo
	INCBIN "MB03+LOGOv2.bin"
ultimatelogo	
	INCBIN "ULTIMATE.bin"
dots	
//	INCBIN "DOTS.bin"	
/*CaroLogo
	INCBIN "CaroLogo.bin" */
/*
NewdimLogo
	INCBIN "NewdimLogo.bin"
eightbc_i
	INCBIN "8BC_I.cde"
EasyLogoSmall
	INCBIN "EasyLogoSmall.bin"
*/	
/*easyhdd	
	INCBIN "easyhdd.out"
easyhddend*/
/*
zvuk
	INCBIN "ZVUK.BIN"
zvukend
*/

/*@SP_TAB
@TAB_sprite1
		 DEFB 10,4
         DEFW CaroLogo
         DEFB 24,20
         DEFW NewdimLogo
         defb 0,21
         defw eightbc_i
         defb 1,2
         defw eightbc_i
         defb 25,2
         defw EasyLogoSmall
*/		 
; --------------- T E X T---------------------------------------
TEXT0 	 	dc 16,69,"LMN128-Jan Kucera-Zlin/CZ"
TEXT4 		db 16,71,"1:",16,6,"MB02+(BSDOS308a+EH) ",16,71,"e:",16,6,"bs128Kreset"
					dc " "
TEXT2	 		db 16,71,"2:",16,6,"DivMMC  ",16,71,"@:",16,6,"DivIDE  "
					dc " "
TEXT3    	db 16,71,"3:",16,6,"MB03+             ",16,71,"d:",16,7,"Devastace+ ",16,71,"t:",16,7,"diag ",16,71,"break:",16,7,"ZXROM  "
					dc " "
TEXT1    	dc 16,69,"MB03+ Ultimate firmware 1.28"
STRIPS		db 16,66,32,32
					db 16,70,32,32
					db 16,68,32,32,32,32,32
					dc 16,69,32,32,32,32,32+128
;TEXTTEST 	dc 16,6,"0123456789 128 WADHTUTTUU ZX Spectrum 128+2"
;TEXTTEST2 dc 16,6,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwyxz"
HW1				db 16,67,"HARDWARE: "
					dc 16,7,"3.0"
HW2				db 16,3,"FPGA: "
					dc 16,7,"Xilinx SPARTAN 7 XC7S50/100 MHz"
HW3				db 16,3,"RTC: "
					dc 16,7,"Maxim DS3234"
HW4				db 16,3,"SRAM: ",16,7,"8192 KBytes ",16,3,"FastSRAM: "
					dc 16,7,"4096 KBytes"
HW5				db 16,3,"STORAGE: "
					dc 16,7,"CompactFlash, 2x microSD"
HW6				db 16,3,"OTHERS: "
					dc 16,7,"USB, Wifi ESP8266, Matrix 8x8 LEDs"

CONF1			db 16,67,"CONFIGURATION: "
					dc 16,7,"1.9"
CONF2			db 16,3,"3xAY: "
					db 16,7,"ON  ",16,3,"SounDrive: ",16,7,"ON  ",16,3,"SAA1099: ",16,7,"ON  ",16,3,"Gen.Sound:"
					dc 16,7,"ON"
CONF3			db 16,3,"DMA: "
					db 16,7,"ON  ",16,3,"IDE: ",16,7,"ON  ",16,3,"SD: ",16,7,"ON  ",16,3,"RTC: ",16,7,"ON ",16,3,"Wifi: "
					dc 16,7,"OFF"
ADVS1			db 16,6,"OnTime: " 
				dc 16,7," "
ADVS2			db 16,6,"Nmi:    "
				dc 16,7," "
ADVS3			db 16,6,"Reset:  "
				dc 16,7," "
ADVS4			db 16,6,"Extra:  "
				dc 16,7," "
ADVS5			db 16,6,"PowerUp:"
				dc 16,7," "				
FW1				dc 16,0,"FW:1.28/"
TESTNUMBER		db 255,255,1,0
DATE			db 16,0
	LUA ALLPASS
	_pc('db	"' .. os.date("%Y%m%d") .. '"') 
	ENDLUA
	dc " " 
		//block 8 // kompenzace delky souboru kvuli os.date
endramcode			
		
	savesna "boot.sna",ramcode  //maincode//ramcode	
	ENDMODULE	